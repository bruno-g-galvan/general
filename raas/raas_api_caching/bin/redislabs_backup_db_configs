#!/usr/bin/env ruby

require 'yaml'
require 'json'
require 'logger'
require 'fileutils'

BACKUPS_PATH = '/var/groupon/raas/db_configs_backup'
API_CACHE_DIR = '/var/groupon/raas/api_cache'

READ_ONLY_ATTRIBS = %w(
                      background_op
                      backup_failure_reason
                      backup_progress
                      backup_status
                      created_time
                      dns_address_master
                      endpoint_ip
                      endpoint_node
                      endpoints
                      export_failure_reason
                      export_progress
                      export_status
                      import_failure_reason
                      import_progress
                      import_status
                      last_backup_time
                      last_changed_time
                      last_export_time
                      status
                      wait_command
                      )

def db_postable(db)
  db_post = db.clone
  READ_ONLY_ATTRIBS.each{|ro| db_post.delete(ro)}
  if db_post['port'].to_i == 0
    db_post['port'] = db['endpoints'].first['port'].to_i
  end
  db_post
end

def db_alerts_postable(db_alerts)
  db_alerts_post = {}
  db_alerts.each do |k, v|
    next unless v['enabled']
    db_alerts_post[k] = {}
    db_alerts_post[k]['enabled'] = true
    db_alerts_post[k]['threshold'] = v['threshold'] if v['threshold']
  end
  db_alerts_post
end

def backup(cluster, dbname, data, type, method, date_str)
  backup_path = "#{BACKUPS_PATH}/#{cluster}.#{type}.#{dbname}.#{method}.#{date_str}.json"
  $logger.info "backup=#{backup_path}"
  IO.write backup_path, JSON.pretty_generate(data)
end

$logger = Logger.new(STDOUT)
$logger.info "starting"
begin
  # configboy roller pkg keeps host.yml up to date
  clusters = YAML.load_file('/var/tmp/host.yml')['params']['clusters'].keys
  now_str = Time.now.strftime('%Y%m%dT%H%M%S')
  clusters.each do |cluster|
    dbs = JSON.parse IO.read(File.join(API_CACHE_DIR,cluster,'dbs.json'))
    alerts = JSON.parse IO.read(File.join(API_CACHE_DIR,cluster,'dbs_alerts.json'))
    dbs.each do |db|
      backup(cluster, db['name'], db, 'db', 'GET', now_str)
      db_post = db_postable(db)
      backup(cluster, db['name'], db_post, 'db', 'POST', now_str)
      db_alerts = alerts[db['uid'].to_s]
      backup(cluster, "#{db['name']}.#{db['uid']}", db_alerts, 'db_alerts', 'GET', now_str)
      db_alerts_post = db_alerts_postable(db_alerts)
      backup(cluster, "#{db['name']}.#{db['uid']}", db_alerts_post, 'db_alerts', 'POST', now_str)
    end
  end
  $logger.info "done"
  FileUtils.touch '/tmp/touched_by_redislabs_backup_db_configs_cron_when_run_successfully'
rescue
  $logger.error $!
end
