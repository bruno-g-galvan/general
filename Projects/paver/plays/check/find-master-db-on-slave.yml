# The playbook will find all RW Database running in the slaves box.
# Is posible to limit to run on specific DC
#
# EXAMPLE for SNC1 for mysql
# ansible-playbook plays/check/find-master-db-on-slave.yml -l gds_prod_mysql_slaves_snc1

# EXAMPLE for SAC1 for mysql
# ansible-playbook plays/check/find-master-db-on-slave.yml -l gds_prod_mysql_slaves_sac1
 
# EXAMPLE for DUB1 for mysql
# ansible-playbook plays/check/find-master-db-on-slave.yml -l gds_prod_mysql_slaves_dub1

# EXAMPLE for SNC1 for postgresql
# ansible-playbook plays/check/find-master-db-on-slave.yml -l gds_prod_postgresql_slaves_snc1

# EXAMPLE for SAC1 for postgresql
# ansible-playbook plays/check/find-master-db-on-slave.yml -l gds_prod_postgresql_slaves_sac1
 
# EXAMPLE for DUB1 for postgresql
# ansible-playbook plays/check/find-master-db-on-slave.yml -l gds_prod_postgresql_slaves_dub1

- hosts: gds_prod_slaves
  gather_facts: no 
  become: yes
  vars:
    outputs: []
  tasks:
    
   - name: Check Instance
     shell: |
      exec 2>&1
      if [ {{ item.value.type }} == 'mysql' ]
      then
        read_only="$(mysql -u root -S /var/groupon/percona/{{ item.key }}/mysql.sock -e "SHOW GLOBAL VARIABLES WHERE Variable_name = 'read_only'" -t -s -N|tail -n -2|head -n +1|sed 's/  *//g'|cut -d '|' -f 3)"
        if [ "ON" != "$read_only" ]
        then
         echo -n "Server: {{ inventory_hostname }} Instance: {{ item.key }} read_only = $read_only"
        fi
      fi
      if [ {{ item.value.type }} == 'postgresql' ]
      then
        in_recovery="$(psql -h localhost -p "{{ item.value.ports.postgresql_raw | default('20003')}}" -U postgres -c 'select pg_is_in_recovery()' -t -A)"
        if [ "f" == "$in_recovery" ]
        then
          echo -n "Server: {{ inventory_hostname }} Instance: {{ item.key }} pg_is_in_recovery = $in_recovery"
        fi 
      fi
     args:
       executable: /usr/local/bin/bash
     register: log_output
     with_dict: "{{ gds_instances }}"
     when:
      - gds_instances is defined
     changed_when: False
     loop_control:
       label: "{{ item.key }}"


   - name: Append outputs
     set_fact:
       outputs: "{{ outputs }} + {{ item.stdout_lines }}"
     with_items: "{{ log_output.results }}"
     when: 
      - item.skipped is not defined
     loop_control:
       label: "{{ item.item.key }}"

   - name: Report
     debug:
       msg: "{{ outputs }}"

