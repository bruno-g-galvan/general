---
###################################################
# aws-clone-instance.yml
#
# Description:  This play is intended to clone an on-premise MySQL database to an AWS RDS Instance.
#               It assumes that the source databases are small enough to use mysqldump (default: 50G).
#
# Parameters:  node=source_server 
#              instance=instance_name_on_source [db=source_database_to_copy] [db_size_imit=GB] [replicate=yes] [preserve=yes] 
#              endpoint=aws_endpoint [gds_migration_pass=password] [repl_pass=password] [skip_users=yes]
#
#              Parms can also be passed via a json file as -e "@test.json"  
#
#              Sample file:
#              node: gds-snc1-prod-db001s1.snc1
#              instance: client_id_prod
#              db: client_id_production
#              endpoint: dminorauroramysql56-0.cz37pbquwh5j.us-west-1.rds.amazonaws.com
#
# Version:     1.3.10
# Date:        2019-12-03
#
# Notes:  1. Endpoint databases will be dropped and recreated.  
#         2. If db is not provided, all databases except information_schema, 
#            mysql, performance_schema, sys and gds_pm will be cloned.
#         3. db_size_limit is specfied in GB.  Default is 50GB.  Max is 100GB.
#         4. Replication is setup by default.  Add replicate=no to override this.
#         5. .my.cnf is REQUIRED in the user's home directory, with the endpoint user name and password.  
#         6. A decryption key MUST be provided for the role to run.  Add the key to ~/.vault on the server
#            that the role is running from.
#         7. Dump files generated by mysqldump are deleted, by default, when the load finishes.
#            Add preserve=yes to override this.
#         8. Non-system MySQL users are dumped and loaded by default.  Add skip_users=yes to override this.
#
###################################################

- name: Depreciated
  hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tasks:
    - debug:
        msg: "NOTE:  This play is depricated.  Please use aws-clone-large-instance.yml for all of your cloning needs."

- name: Check params
  hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tasks:
    - assert:
        that:
          - node is defined
          - instance is defined
          - endpoint is defined

- name: Create Backup File from source and load into endpoint
  become: false
  hosts:
    - "{{ node }}"
  vars:
    gds_migration_pass: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              66626434393530346134303634386233383030333735663761386263333632323031303232343037
              3536303032326663613162666333313230313632336464390a363230376363303133336638323764
              64326431373130383766306634366665363462303266643866383335396562353064623263346235
              3666333136616166310a343662316233636339393065643033353536663231643165346638323137
              33373731643438366265373434343361383930386666393131366132363936303133
    repl_pass: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              62336264613734376338316234616639643137346439343262313463303535303936333333616264
              3366633336623238613133663938626563326330666231360a343362646234396234303930623437
              62633161326239303630343463376432336162646332343465636230393962616230313164376262
              6465373834326264660a313561656266346364643666393037306636373462363566613235616237
              3739
  gather_facts: false
  tasks:
    - name: Install py27-MySQLdb for mysql_user module
      pkgng:
        name: py27-MySQLdb
        state: present
      become: true

    - name: Generate datetime stamp for backup location
      shell: date +'%Y%m%d-%H%M%S'
      changed_when: false
      register: datetime

    - name: Set datetime value
      set_fact:
         dt: "{{ datetime.stdout }}"

    - name: Set default db_size_limit
      set_fact:
        db_size_limit: 50
      when: db_size_limit is not defined
      
    - name: Abort if db_size_limit is too large
      fail:
        msg: db_size_limit is too large.  Cannot be larger then 100(GB)
      when: db_size_limit|float > 100.0

    - name: Get list of databases to dump, unless provided
      shell: mysql -S/var/groupon/percona/{{ instance }}/mysql.sock -BAN -e "SELECT GROUP_CONCAT(schema_name SEPARATOR ' ') FROM information_schema.SCHEMATA WHERE schema_name NOT IN ('information_schema','mysql','performance_schema','sys','percona','hydra','maatkit','gds_pm')"      
      changed_when: false
      register: db_list
      become: true
      when: db is not defined
    
    - name: Set db list
      set_fact:
        db: "{{ db_list.stdout }}"
        commas: "{{ db_list.stdout|replace(\" \", \"','\") }}"
      when: db is not defined
      
    - name: Set db list
      set_fact:
        commas: "{{ db }}"
      when: db is defined

    - name: Get source database sizes
      shell: mysql -S/var/groupon/percona/{{ instance }}/mysql.sock -BAN -e "SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024 / 1024, 1) AS 'Size' FROM information_schema.tables WHERE table_schema IN ('{{ commas }}')"
      changed_when: false
      register: db_size
      become: true

    - name:  Report source database sizes
      debug:
        msg: "Database list: '{{ commas }}', size: {{ db_size.stdout }} GB"
      
    - name: Abort if database is too large
      fail:
        msg: Database is too large
      when: db_size.stdout|float > db_size_limit|float
                
    - name: Remove previous dump file, if present
      file: path=/var/groupon/percona/backup/{{ instance }}-{{ dt }}.sql state=absent
      become: true

    - name: Remove previous routines file, if present
      file: path=/var/groupon/percona/backup/{{ instance }}-{{ dt }}.routines.sql state=absent
      become: true

    - name: Create source backup location
      file: path=/var/groupon/percona/backup owner=root group=wheel mode=0777 state=directory
      become: true

    - name: mysqldump database
      shell: mysqldump -S/var/groupon/percona/{{ instance }}/mysql.sock --databases {{ db }} percona --skip-triggers --master_data=2 > /var/groupon/percona/backup/{{ instance }}-{{ dt }}.sql
      become: true
      
    - name: Dump Application Users
      shell: /usr/local/bin/pt-show-grants --noheader --ignore=root@localhost,root@%,root@127.0.0.1,dba_util@localhost,dba_util@%,dba_util@127.0.0.1,gds_mha@localhost,gds_mha@%,gds_mha@127.0.0.1,monitor@localhost,monitor@%,monitor@127.0.0.1,percona@localhost,percona@%,percona@127.0.0.1,playback_user@localhost,playback_user@%,playback_user@127.0.0.1,pt_heartbeat@localhost,pt_heartbeat@%,pt_heartbreat@127.0.0.1,replication@localhost,replication@%,replication@127.0.0.1,checkmk_mon@localhost,checkmk_mon@127.0.0.1,checkmk_mon@% -S/var/groupon/percona/{{ instance }}/mysql.sock > /var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql 
      become: true
      when: skip_users is not defined or skip_users|upper != "YES"
      
    - name: mysqldump Routines, Events and Triggers
      shell: mysqldump -S/var/groupon/percona/{{ instance }}/mysql.sock --databases {{ db }} percona --triggers --routines --events -td > /var/groupon/percona/backup/{{ instance }}-{{ dt }}.routines.sql
      become: true

    - name: Convert Triggers
      replace:
        path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.routines.sql
        regexp: '/\*!50017.+?/'
      become: true

    - name: Convert Routines
      replace:
        path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.routines.sql
        regexp: 'DEFINER.+? '
      become: true
    
    - name: Setup Replication
      block:      
        - name: Get source database port
          shell: mysql -S/var/groupon/percona/{{ instance }}/mysql.sock -BAN -e "SELECT @@port"
          changed_when: false
          register: info
          become: true
          
        - name: Set port
          set_fact:
            port: "{{ info.stdout|int }}"

        - name: Get source database MASTER_LOG_FILE
          shell: grep --max-count=1 "CHANGE MASTER TO" /var/groupon/percona/backup/{{ instance }}-{{ dt }}.sql | awk '{ print $5 }' | cut -d= -f2 | cut -d\' -f2
          changed_when: false
          register: info
          
        - name: Set MASTER_LOG_FILE
          set_fact:
            file: "{{ info.stdout }}"

        - name: Get source database MASTER_LOG_POS
          shell: grep --max-count=1 "CHANGE MASTER TO" /var/groupon/percona/backup/{{ instance }}-{{ dt }}.sql | awk '{ print $6 }' | cut -d= -f2 | cut -d\; -f1
          changed_when: false
          register: info

        - name: Set MASTER_LOG_POS
          set_fact:
            pos: "{{ info.stdout|int }}"

        - name: Stop replication, if running
          shell: mysql -h {{ endpoint }} -A -e "CALL mysql.rds_stop_replication"
          ignore_errors: true

        - name: Wait for replication to stop
          pause:
            seconds: 5

        - name: Reset replication, if running
          shell: mysql -h {{ endpoint }} -A -e "CALL mysql.rds_reset_external_master"
          ignore_errors: true
      when: replicate is not defined or replicate|upper == "YES"

    - name: Create gds_migration user
      mysql_user:
        name: "gds_migration"
        password: "{{ gds_migration_pass }}"
        host: "%"
        priv: "*.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,RELOAD,PROCESS,REFERENCES,INDEX,ALTER,SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,REPLICATION SLAVE,REPLICATION CLIENT,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,CREATE USER,EVENT,TRIGGER"
        login_host: "{{ endpoint }}"
        state: present

    - name: Create replication user
      mysql_user:
        name: "replication"
        password: "{{ repl_pass }}"
        host: "%"
        priv: "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
        login_host: "{{ endpoint }}"
        state: present

    - name: Dump, Convert and Load Application users
      block:              
        - name: Convert Application Users - Remove SUPER priv
          replace:
            path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql
            regexp: ', SUPER'
          become: true

        - name: Convert Application Users - Remove Global FILE priv
          replace:
            path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql
            regexp: 'GRANT FILE ON '
            replace: 'GRANT USAGE ON '
          become: true

        - name: Convert Application Users - Remove database FILE priv
          replace:
            path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql
            regexp: ', FILE'
          become: true

        - name: Convert Application Users - Remove CREATE TABLESPACE priv
          replace:
            path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql
            regexp: ' CREATE TABLESPACE,'
          become: true          

        - name: Dump Rejected Users
          shell: 
          args:
            cmd: grep "SELECT ON \*\.\*" {{ instance }}-{{ dt }}.app_users.sql > {{ instance }}-{{ dt }}.rejected_users.sql ; grep "CREATE TABLESPACE" {{ instance }}-{{ dt }}.app_users.sql >> {{ instance }}-{{ dt }}.rejected_users.sql ; grep "ALL PRIVILEGES ON \*\.\*" {{ instance }}-{{ dt }}.app_users.sql >> {{ instance }}-{{ dt }}.rejected_users.sql
            chdir: /var/groupon/percona/backup
          ignore_errors: true
          become: true

        - name: Get size of rejected users file
          stat:
            path: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.rejected_users.sql
          register: ru

        - name: Convert Application Users - Remove rejected users, if any
          shell:
          args:
            cmd: awk 'NR==FNR{a[$0];next} !($0 in a)' {{ instance }}-{{ dt }}.rejected_users.sql {{ instance }}-{{ dt }}.app_users.sql > {{ instance }}-{{ dt }}.tmp.sql ; mv {{ instance }}-{{ dt }}.tmp.sql {{ instance }}-{{ dt }}.app_users.sql
            chdir: /var/groupon/percona/backup
          ignore_errors: true
          become: true
          when: ru.stat.size > 0
              
        - name: Get Total Rejected Users
          debug:
            msg: "Total Rejected Users: /var/groupon/percona/backup/{{ instance }}-{{ dt }}.rejected_users.sql, size in bytes: {{ ru.stat.size}}"

        - name: Load Application Users
          shell: cat /var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql | mysql -h {{ endpoint }} -A mysql
          changed_when: false
      when: skip_users is not defined or skip_users|upper != "YES"
        
    - name: Load dump into endpoint
      shell: cat /var/groupon/percona/backup/{{ instance }}-{{ dt }}.sql | mysql -h {{ endpoint }} -A

    - name: Load Routines, Events and Triggers into endpoint
      shell: cat /var/groupon/percona/backup/{{ instance }}-{{ dt }}.routines.sql | mysql -h {{ endpoint }} -A

    - name: Remove dump files on src
      block:
        - name: Remove dump file
          file: path=/var/groupon/percona/backup/{{ instance }}-{{ dt }}.sql state=absent
          become: true

        - name: Remove Application Users file
          file: path=/var/groupon/percona/backup/{{ instance }}-{{ dt }}.app_users.sql state=absent
          become: true
    
        - name: Remove routines file on src
          file: path=/var/groupon/percona/backup/{{ instance }}-{{ dt }}.routines.sql state=absent
          become: true
      when: preserve is not defined or preserve|upper != "YES"
    - name: Setup up Replication
      block:  
        - name: Setup replication
          shell: mysql -h {{ endpoint }} -A -e "CALL mysql.rds_set_external_master ('{{ node }}', {{ port }}, 'replication', '{{ repl_pass }}', '{{ file }}', {{ pos }}, 0)"

        - name: Start replication
          shell: mysql -h {{ endpoint }} -A -e "CALL mysql.rds_start_replication"

        - name: Get replication status
          shell: mysql -h {{ endpoint }} -A -e "SHOW SLAVE STATUS\G"
          register: repl_stat

        - name: Replication status
          debug:
            var=repl_stat.stdout_lines
      when: replicate is not defined or replicate|upper == "YES"

