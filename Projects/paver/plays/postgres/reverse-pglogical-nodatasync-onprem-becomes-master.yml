---
- name: Ensure command line variables are set and daas part 1
  gather_facts: False
  become: true
  hosts:
    - '{{ daas_host }}'
  tasks:

    - assert:
        that:
          - daas_host is defined
          - instance is defined
          - aws_host is defined
          - admin_password is defined

    - set_fact: 
        pglogical_status={{ gds_instances[instance].extra_variables.pglogical }}
        my_db_schema={{ gds_instances[instance].schemas }}
        my_first_db={{ gds_instances[instance].dbnames.0 }}
        my_dba_user={{ gds_instances[instance].dba_account_name }}
        my_app_user={{ gds_instances[instance].app_account_name }} 
        my_master_vip={{ gds_instances[instance].master_vip }}

    - set_fact:
        my_db_name: '{{ my_first_db }}'
      when: db is not defined

    - set_fact:
        my_db_name: '{{ db }}'
      when: db is defined

    - name: check if pglogical is on
      fail: msg="Exiting ---------pglogical variable is not set to on"
      when:  pglogical_status is not defined or pglogical_status != 'on' 

    - name: check if database is defined
      fail: msg="Exiting ---------database is not defined"
      when:  my_db_name is not defined

    - name: check if db schema is defined
      fail: msg="Exiting --------- dba user is not defined"
      when:  my_db_schema is not defined

    - name: check if app_user is defined
      fail: msg="Exiting --------- dba user is not defined"
      when:  my_app_user is not defined

    - name: check if dba_user is defined
      fail: msg="Exiting --------- dba user is not defined"
      when:  my_dba_user is not defined

    - name: check if master vip is defined
      fail: msg="Exiting --------- master vip is not defined"
      when:  my_master_vip is not defined
  
    - name: Set app user to nologin
      shell: psql -U postgres -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "alter user {{ my_app_user }} nologin"

    - name: Set dba user to nologin
      shell: psql -U postgres -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "alter user {{ my_dba_user }} nologin"

    - name: Kill remaining sessions
      shell: psql -U postgres -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "select pg_terminate_backend(pid) from pg_stat_activity where pid != pg_backend_pid() and application_name not like 'pglogical%' and usename!='gds_admin'"


- name: Aws part 1
  gather_facts: False
  become: true
  hosts: 127.0.0.1
  connection: local
  tasks:
  
    - set_fact:
        my_db_name: "{{ hostvars[daas_host]['my_db_name'] }}"
        my_first_db: "{{ hostvars[daas_host]['my_first_db'] }}"
        my_db_schema: "{{ hostvars[daas_host]['my_db_schema'] }}"
        my_dba_user: "{{ hostvars[daas_host]['my_dba_user'] }}"
        my_app_user: "{{ hostvars[daas_host]['my_app_user'] }}"

    - name: revoke Privileges 1/2
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "revoke insert,update,delete on all tables in schema {{ item }} from {{ my_app_user}}"
      with_items: "{{ my_db_schema[my_db_name] }}"

    - name: revoke Privileges 2/2
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "revoke update on all sequences in schema {{ item }} from {{ my_app_user}}"
      with_items: "{{ my_db_schema[my_db_name] }}"

    - name: Set app user to nologin
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "alter user {{ my_app_user }} nologin"

    - name: Set dba user to nologin
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "alter user {{ my_dba_user }} nologin"     

    - name: Kill remaining sessions
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "select pg_terminate_backend(pid) from pg_stat_activity where pid != pg_backend_pid() and application_name not like 'pglogical%' and usename is not null and usename not in ('rdsadmin','gds_admin')"

    - name: Check that replication delay is small
      command: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "select pg_wal_lsn_diff(pg_current_wal_lsn(),write_lsn) from pg_stat_replication where application_name='{{ my_db_name }}_pg94_subscription'"
      register: replication_lag_final
      until: replication_lag_final.stdout|int  <  10000000
      retries: 1000
      delay: 1

    - name: One time sequence push
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "SELECT pglogical.synchronize_sequence( seqoid ) FROM pglogical.sequence_state"


- name: Daas part 2
  gather_facts: False
  become: true
  hosts:
    - '{{ daas_host }}'
  tasks:

    - set_fact:
        my_db_name: "{{ hostvars[daas_host]['my_db_name'] }}"
        my_dba_user: "{{ hostvars[daas_host]['my_dba_user'] }}"
        my_app_user: "{{ hostvars[daas_host]['my_app_user'] }}"

    - name: Drop subscription
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "select pglogical.drop_subscription('{{ my_db_name }}_pg94_subscription')"

    - name: Drop node
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }}  -c "select pglogical.drop_node('{{ my_db_name }}_pg94_subscriber')"

    - name: Check if provider exists
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "select count(*) from pglogical.node_interface where if_name='{{ my_db_name }}_provider'"
      register: count_provider

    - name: Create provider
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "SELECT pglogical.create_node(node_name := '{{ my_db_name }}_provider', dsn := 'host=127.0.0.1 port={{ gds_instances[instance].ports.postgresql_raw }}  dbname={{ my_db_name }} user=gds_admin')"
      when:  count_provider.stdout|int  == 0

    - name: Add tables
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "SELECT pglogical.replication_set_add_all_tables('default', '{ {{ item }} }'::text[])"
      with_items: "{{ my_db_schema[my_db_name] }}"

    - name: Add sequences
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "SELECT pglogical.replication_set_add_all_sequences('default', '{ {{ item }} }'::text[],true )"
      with_items: "{{ my_db_schema[my_db_name] }}"

    - name: Add heartbeat
      shell: psql -U postgres -d {{ my_db_name }} -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "select pglogical.replication_set_add_table('default','heartbeat.repl_status'::regclass)"
      when: 'my_db_name == my_first_db'
  
    - name: Start the heartbeat service
      shell: sv start /var/service/{{ instance }}-pg_heartbeat


- name: Aws part 2
  gather_facts: False
  become: true
  hosts: 127.0.0.1
  connection: local
  tasks:
  
    - set_fact:
        my_db_name: "{{ hostvars[daas_host]['my_db_name'] }}"
        my_first_db: "{{ hostvars[daas_host]['my_first_db'] }}"
        my_db_schema: "{{ hostvars[daas_host]['my_db_schema'] }}"
        my_dba_user: "{{ hostvars[daas_host]['my_dba_user'] }}"
        my_app_user: "{{ hostvars[daas_host]['my_app_user'] }}"
        my_master_vip: "{{ hostvars[daas_host]['my_master_vip'] }}"


    - name: Drop provider
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "select pglogical.drop_node('{{ my_db_name }}_aws_provider')"

    - name: Check if subscriber exists
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "select count(*) from pglogical.node_interface where if_name='{{ my_db_name }}_rds_pg10_subscriber'"
      register: count_subscriber

    - name: Create subscriber
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "SELECT pglogical.create_node(node_name := '{{ my_db_name }}_rds_pg10_subscriber', dsn := 'host=127.0.0.1 port=5432 dbname={{ my_db_name }} user=gds_admin password={{ admin_password }}')" 
      when:  count_subscriber.stdout|int  == 0

    - name: Check if subscription exists
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "select count(*) from pglogical.subscription where sub_name='{{ my_db_name }}_rds_pg10_subscription'"
      register: count_subscription

    - name: Create subscription
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c " SELECT pglogical.create_subscription(subscription_name := '{{ my_db_name }}_rds_pg10_subscription', provider_dsn := 'host={{ my_master_vip }} port=15432 dbname={{ my_db_name }} user=gds_admin password={{ admin_password }}', replication_sets := '{default}'::text[], synchronize_data := false);"
      when:  count_subscription.stdout|int  == 0

    - name: Show one-time replication status 
      shell: psql -U gds_admin -d {{ my_db_name }} -p 5432 -h {{ aws_host }} -c "SELECT subscription_name, status FROM pglogical.show_subscription_status();"
      register: pglogical_repl_status
    - debug: var=pglogical_repl_status.stdout

    - name: Check that replication has been initiated
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "select status from pglogical.show_subscription_status()"
      register: aws_repl_status
      until: aws_repl_status.stdout == "replicating"
      retries: 1000


- name: Daas part 3
  gather_facts: False
  become: true
  hosts:
    - '{{ daas_host }}'
  tasks:

    - set_fact:
        my_db_name: "{{ hostvars[daas_host]['my_db_name'] }}"
        my_dba_user: "{{ hostvars[daas_host]['my_dba_user'] }}"
        my_app_user: "{{ hostvars[daas_host]['my_app_user'] }}"

    - name: check if the new logical slave has succesfully connected to the new master
      shell: psql -U postgres -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "select count(*) from pg_stat_replication where application_name='{{ my_db_name }}_rds_pg10_subscription'"
      register: count_pglogical_slave
    - name: verify it has connected
      fail: msg="Exiting ----------No pglogical slave found"
      when:  count_pglogical_slave.stdout  == "0"

    - name: Set app user to login
      shell: psql -U postgres -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "alter user {{ my_app_user }} login"

    - name: Set dba user to login
      shell: psql -U postgres -At -p {{ gds_instances[instance].ports.postgresql_raw }} -c "alter user {{ my_dba_user }} login"


- name: Aws part 3
  gather_facts: False
  become: true
  hosts: 127.0.0.1
  connection: local
  tasks:

    - set_fact:
        my_db_name: "{{ hostvars[daas_host]['my_db_name'] }}"
        my_dba_user: "{{ hostvars[daas_host]['my_dba_user'] }}"
        my_app_user: "{{ hostvars[daas_host]['my_app_user'] }}"

    - name: Set app user to login
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "alter user {{ my_app_user }} login"

    - name: Set dba user to login
      shell: psql -U gds_admin -d {{ my_db_name }} -At -p 5432 -h {{ aws_host }} -c "alter user {{ my_dba_user }} login"      
