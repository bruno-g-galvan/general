#!/usr/bin/env bash

function find_database {
    currentinstance=$(grep -A1 "${port}" /etc/check_mk/postgres.cfg)
    dbname=$(echo "$currentinstance" | grep "dbname=" | sed -e 's/dbname=//')
}


function lookup_port {
    conf="$1"
    cat "${conf}" | grep 'port =' | awk '{ print $3}'
}

function find_non_default_settings {
    Port="$1"
    result=$(psql -p $Port -U postgres -c "select name,source,setting from pg_settings where source != 'default' and source != 'override' 
and name not in ('DateStyle','TimeZone','default_text_search_config','lc_messages','lc_monetary','lc_numeric',
'lc_time','log_checkpoints','log_connections','log_destination','log_disconnections','log_duration','log_filename',
'log_line_prefix','log_lock_waits','log_temp_files','log_timezone','track_activity_query_size','track_functions',
'track_io_timing','update_process_title','max_stack_depth','application_name','archive_command','archive_mode','port','shared_preload_libraries')
ORDER BY 2,1")
    echo "***************************************************Non-Default Settings:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}



function find_oldest_running {
    Port="$1"
    result=$(psql -p $Port -t -x -U postgres -c "select extract(epoch from (now() - xact_start)) as duration, * from pg_stat_activity where state not in 
('idle','idle in transaction') and query not ilike  '%vacuum%' and pid != pg_backend_pid() order by xact_start asc limit 1")
    echo "***************************************************oldest trx running:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}

function find_oldest_idle_in_transaction {
    Port="$1"
    result=$(psql -p $Port -t -x -U postgres -c "select extract(epoch from (now() - xact_start)) as duration, * from pg_stat_activity where state in
('idle in transaction') order by xact_start asc limit 1")
    echo "****************************************************oldest idle in trx:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}

function find_blocking_blocked {
    Port="$1"
    result=$(psql -p $Port -t -x -U postgres -c "  SELECT blocked_locks.pid     AS blocked_pid,
         blocked_activity.usename  AS blocked_user,
         blocking_locks.pid     AS blocking_pid,
         blocking_activity.usename AS blocking_user,
         blocked_activity.query    AS blocked_statement,
         blocking_activity.query   AS current_statement_in_blocking_process
   FROM  pg_catalog.pg_locks         blocked_locks
    JOIN pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = blocked_locks.pid
    JOIN pg_catalog.pg_locks         blocking_locks 
        ON blocking_locks.locktype = blocked_locks.locktype
        AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
        AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
        AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
        AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
        AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
        AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
        AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
        AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
        AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
        AND blocking_locks.pid != blocked_locks.pid
    JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
   WHERE NOT blocked_locks.GRANTED and blocking_locks.granted is true;")
    echo "****************************************************blocking/blocked sessions: "
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_locks_not_granted {
    Port="$1"
    result=$(psql -p $Port -At -U postgres -c "select count(*) from pg_locks where granted='f'")
    echo "****************************************************locks not granted: ${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    if (( $result > 0 )); then
       find_blocking_blocked ${Port}
    fi
}

function find_replication_lag_master {
    Port="$1"
    has_slave=$(psql -p $Port -At -U postgres -c "select count(*) from pg_stat_replication")
    if (( $has_slave > 0 )); then
        result=$(psql -p $Port -U postgres -c "select client_addr as slave_ip,pg_xlog_location_diff(pg_current_xlog_location(),replay_location) as bytes_lag 
from pg_catalog.pg_stat_replication where application_name = 'walreceiver'")
    echo "****************************************************replication lag master in bytes:"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    fi
    if (( $has_slave == 0 )); then
    echo "****************************************************replication lag master: there is no slave!"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    fi
}


function find_replication_lag_slave_bytes {
    Port="$1"
    result=$(psql -p $Port -At -U postgres -c "select pg_xlog_location_diff(pg_last_xlog_receive_location(),pg_last_xlog_replay_location()) as replication_lag_slave;")
    echo "****************************************************replication lag in bytes: ${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_replication_lag_slave_last_trx {
    Port="$1"
    result=$(psql -p $Port -At -U postgres -c "select extract (epoch from now() - pg_last_xact_replay_timestamp())::integer as replication_lag_slave;")
    echo "****************************************************last applied transaction was: ${result} seconds ago"

}

function find_replication_lag_slave_to_slave {
    Port="$1"
    has_slave=$(psql -p $Port -At -U postgres -c "select count(*) from pg_stat_replication")
    if (( $has_slave > 0 )); then
    result=$(psql -p $Port -U postgres -c "select client_addr as slave_ip,pg_xlog_location_diff(sent_location,replay_location) as 
bytes_lag from pg_catalog.pg_stat_replication where application_name = 'walreceiver'")
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "****************************************************replication slave to slave:"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    fi
    if (( $has_slave == 0 )); then
    echo "****************************************************replication slave to slave: there is no slave!"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    fi
}

function find_conflicts {
    Port="$1"
    result=$(psql -p $Port -t -x -U postgres -c "select * from pg_stat_database_conflicts where datname not in ('postgres','template1','template0')")
    echo "****************************************************Database Conflicts:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}


function find_replication_lag {
    Port="$1"
    recovery=$(psql -p $Port -At -U postgres -c "select pg_is_in_recovery()")
    if [[ $recovery == t ]]; then
       find_replication_lag_slave_bytes ${Port};
       find_replication_lag_slave_last_trx ${Port};
       find_replication_lag_slave_to_slave ${Port};
       find_conflicts ${Port};
    else 
       find_replication_lag_master ${Port}
    fi
}

function find_connections {
    Port="$1"
    result=$(psql -p $Port -At -U postgres -c "show max_connections")
        echo "****************************************************max_connections: ${result}"
    result=$(psql -p $Port -At -U postgres -c "select count(*),usename from pg_stat_activity where pid != pg_backend_pid() group by 2")
        echo "****************************************************number of connected sessions per user:"
        echo "${result}"
    result=$(psql -p $Port -At -U postgres -c "select rolconnlimit from pg_roles where rolname like '%app' or rolname like '%django'")
        echo "****************************************************app user limit: ${result}"
    result=$(psql -p $Port -At -U postgres -c "select rolconnlimit from pg_roles where rolname like '%dba'")
        echo "****************************************************dba user limit: ${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_pgbouncer_stats {
    Port="$1"
    data_dir=$(psql -p $Port -At -U postgres -c "show data_directory")
    Instance=$(echo ${data_dir} | sed 's/.*-//' | sed 's/.data*//')
    trxPort=$(($Port - 2))
    sesPort=$(($Port - 1))
#    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$trxPort --host=localhost --action=pgbouncer_backends | awk '{print $7}')
#        echo "                                                    backends: ${result}"
        echo "****************************************************PGBOUNCER TRX STATS"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$trxPort --host=localhost --action=pgb_pool_cl_active | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    clients: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$trxPort --host=localhost --action=pgb_pool_cl_waiting | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    waiting: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$trxPort --host=localhost --action=pgb_pool_maxwait | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    max_wait: ${result}"   
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$trxPort --host=localhost --action=pgb_pool_sv_active | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    active servers: ${result}"
     result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$trxPort --host=localhost --action=pgb_pool_sv_idle | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    idle servers: ${result}"
    result=$(grep 'req/s' /var/service/pgbouncer-*$Instance-transaction_mode/log/main/current  | tail -n 10)
        echo "                                                    last 10 minutes(no data means the logs rotate too fast and there is no relevant info in the current log):"
        echo "${result}"


        echo "****************************************************PGBOUNCER SESSION STATS"
#    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$sesPort --host=localhost --action=pgbouncer_backends | awk '{print $7}')
#        echo "                                                    backends: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$sesPort --host=localhost --action=pgb_pool_cl_active | awk '{print $8}' |sed 's/.*=//' )
        echo "                                                    clients: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$sesPort --host=localhost --action=pgb_pool_cl_waiting | awk '{print $8}' |sed 's/.*=//' )
        echo "                                                    waiting: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$sesPort --host=localhost --action=pgb_pool_maxwait | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    max_wait: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$sesPort --host=localhost --action=pgb_pool_sv_active | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    active servers: ${result}"
    result=$(/usr/local/bin/check_postgres_new.pl --dbname=pgbouncer --dbuser=gdsmon --port=$sesPort --host=localhost --action=pgb_pool_sv_idle | awk '{print $8}' | sed 's/.*=//' )
        echo "                                                    idle servers: ${result}"
    result=$(grep 'req/s' /var/service/pgbouncer-*$Instance-session_mode/log/main/current | tail -n 10)
        echo "                                                    last 10 minutes(no data means the logs rotate too fast and there is no relevant info in the current log):"
        echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}


function find_current_Qs_top_running {
    Port="$1"
    result=$(psql -p $Port -At -U postgres -c "select count(*),query from pg_stat_activity where state='active' and pid != pg_backend_pid() group by 2 order by 1 desc limit 5")
    echo "****************************************************top 5 Queries(count):"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}


function find_current_Qs_slow_running {
    Port="$1"
    result=$(psql -p $Port -At -U postgres -c "select query,now() - query_start from pg_stat_activity where state='active' and query_start <= now() - interval '1 second' and pid != pg_backend_pid() order by 2 desc limit 5")
    echo "****************************************************top 5 slow Queries:"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_wraparound {
    Port="$1"
    result=$(psql -d $dbname -p $Port -U postgres -c "SELECT relname, age(relfrozenxid) as xid_age, pg_size_pretty(pg_table_size(oid)) as table_size FROM pg_class WHERE relkind = 'r' and pg_table_size(oid) > 10 and age(relfrozenxid) > 200000000 
ORDER BY age(relfrozenxid) desc")
    echo "****************************************************tables that need to be vaccuumed (to avoid trx wraparound):"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_log_errors {
    Port="$1"
    log_collector=$(psql -p $Port -At -U postgres -c "show logging_collector")
    data_dir=$(psql -p $Port -At -U postgres -c "show data_directory")
    Instance=$(echo ${data_dir} | sed 's/.*-//' | sed 's/.data*//')
    if [[ $log_collector == off ]]; then
          result=$(grep -E 'ERROR|FATAL' /var/service/postgresql-*$Instance/log/main/current | tail -n 20)
          echo "**************************************************** last 20 ERRORS in postgresql's log:(note that logging is not enabled, maybe errors are few because logs rotate too often. check under /var/service/postgresql-*$Instance/log/main/ for more)"
          echo "${result}"
    else
          log_file=$(psql -p $Port -At -U postgres -c "select filename from (SELECT pg_ls_dir AS filename,(pg_stat_file('pg_log/' || pg_ls_dir)).modification FROM pg_ls_dir('pg_log') WHERE (pg_stat_file('pg_log/' || pg_ls_dir)).isdir = false ORDER BY modification DESC LIMIT 1) as foo;")
          data_dir=$(psql -p $Port -At -U postgres -c "show data_directory")
          result=$(grep -E 'ERROR|FATAL' $data_dir/pg_log/$log_file | tail -n 20)
          echo "**************************************************** last 20 ERRORS in postgresql's log:"
          echo "${result}"
    fi
    result=$(grep 'Error' /var/service/pgbouncer-*$Instance-transaction_mode/log/main/current  | tail -n 10)
          echo "**************************************************** last 10 ERRORS in pgbouncer's log(trx):"
          echo "${result}"
    result=$(grep 'Error' /var/service/pgbouncer-*$Instance-session_mode/log/main/current  | tail -n 10)
          echo "**************************************************** last 10 ERRORS in pgbouncer's log(session):"
          echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_if_instance_is_online {
    Port="$1"
    result=$(pg_isready -p $Port -U postgres)
    if [[ ${result} != *"accepting connections"* ]];then
          echo "****************************************************no instance running on this port"
          exit 1
    fi

    result=$(psql -p $Port -At -U postgres -c "select 100")
#          echo "${result}"
    if [[ ${result} == "100" ]];then
          echo "*************************************************** Gathering Stats"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    else 
          echo "**************************************************** This is a pgbouncer instance, exiting..."
          exit 1
    fi
}


if [ $# -lt 1 ]; then
    echo 'no argument given'
    exit 1
elif [ $# -gt 1 ]; then
    echo 'too many arguments'
    exit 1
fi
 
if [ $1 -lt 20000 ]; then
    echo 'port number too low'
    exit 1
elif [ $1 -gt 20300 ]; then
    echo 'port number too high'
    exit 1
fi

    port="$1"    
    find_if_instance_is_online ${port}
    find_database
    find_oldest_running ${port}
    find_oldest_idle_in_transaction ${port}
    find_non_default_settings ${port}
    find_locks_not_granted ${port}
    find_replication_lag ${port}
    find_connections ${port}
    find_pgbouncer_stats ${port} 
    find_current_Qs_top_running ${port}
    find_current_Qs_slow_running ${port}
    find_wraparound ${port}
    find_log_errors ${port} 
