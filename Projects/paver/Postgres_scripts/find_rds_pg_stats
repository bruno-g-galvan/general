#!/usr/bin/env bash

function find_database {
    Vip="$1"
    result=$(psql -p 5432 -h $Vip -t -U gds_admin -d postgres -c "select datname from pg_stat_database where datname not in ('template0','template1','postgres','rdsadmin') order by 1")
    echo "***************************************************Available databases:"
    echo "-------------------------------------------------------------------------------------------"
    echo "${result}"
    echo "-------------------------------------------------------------------------------------------"
}

function find_non_default_settings {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -U gds_admin -c "select name,source,setting from pg_settings where source != 'default' and source != 'override'
and name not in ('DateStyle','TimeZone','default_text_search_config','lc_messages','lc_monetary','lc_numeric',
'lc_time','log_checkpoints','log_connections','log_destination','log_disconnections','log_duration','log_filename',
'log_line_prefix','log_lock_waits','log_temp_files','log_timezone','track_activity_query_size','track_functions',
'track_io_timing','update_process_title','max_stack_depth','application_name','archive_command','archive_mode','port','shared_preload_libraries')
ORDER BY 2,1")
    echo "***************************************************Non-Default Settings:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}



function find_oldest_running {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select extract(epoch from (now() - xact_start)) as duration, * from pg_stat_activity where state not in
('idle','idle in transaction') and datname='$Dbname' and query not ilike  '%vacuum%' and pid != pg_backend_pid() and usename not in ('rdsadmin','rdsrepladmin') and query is not NULL order by xact_start asc limit 1")
    echo "***************************************************oldest trx running:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}

function find_oldest_idle_in_transaction {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select extract(epoch from (now() - xact_start)) as duration, * from pg_stat_activity where state in
('idle in transaction') and datname='$Dbname' order by xact_start asc limit 1")
    echo "****************************************************oldest idle in trx:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}

function find_blocking_blocked {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "  SELECT blocked_locks.pid     AS blocked_pid,
         blocked_activity.usename  AS blocked_user,
         blocking_locks.pid     AS blocking_pid,
         blocking_activity.usename AS blocking_user,
         blocked_activity.query    AS blocked_statement,
         blocking_activity.query   AS current_statement_in_blocking_process
   FROM  pg_catalog.pg_locks         blocked_locks
    JOIN pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = blocked_locks.pid
    JOIN pg_catalog.pg_locks         blocking_locks
        ON blocking_locks.locktype = blocked_locks.locktype
        AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
        AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
        AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
        AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
        AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
        AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
        AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
        AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
        AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
        AND blocking_locks.pid != blocked_locks.pid
    JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
   WHERE NOT blocked_locks.GRANTED and blocking_locks.granted is true;")
    echo "****************************************************blocking/blocked sessions: "
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_locks_not_granted {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select count(*) from pg_locks where granted='f'")
    echo "****************************************************locks not granted: ${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    if (( $result > 0 )); then
       find_blocking_blocked ${Vip} ${Dbname}
    fi
}

function find_replication_lag_master {
    Vip="$1"
    Dbname="$2"
    has_slave=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select count(*) from pg_stat_replication")
    if (( $has_slave > 0 )); then
        result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select client_addr as slave_ip,pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn) as bytes_lag
from pg_catalog.pg_stat_replication where application_name = 'walreceiver'")
    echo "****************************************************replication lag master in bytes:"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    fi
    if (( $has_slave == 0 )); then
    echo "****************************************************replication lag master: there is no slave!"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    fi
}


function find_replication_lag_slave_bytes {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select pg_wal_lsn_diff(pg_last_wal_receive_lsn(),pg_last_wal_replay_lsn()) as replication_lag_slave;")
    echo "****************************************************replication lag in bytes: ${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_replication_lag_slave_last_trx {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select extract (epoch from now() - pg_last_xact_replay_timestamp())::integer as replication_lag_slave;")
    echo "****************************************************last applied transaction was: ${result} seconds ago"

}

function find_conflicts {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -U gds_admin -c "select * from pg_stat_database_conflicts where datname not in ('postgres','template1','template0','rdsadmin')")
    echo "****************************************************Database Conflicts:"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo "${result}"
}


function find_replication_lag {
    Vip="$1"
    Dbname="$2"
    recovery=$(psql -p 5432 -h $Vip -d $Dbname -At -U gds_admin -c "select pg_is_in_recovery()")
    if [[ $recovery == t ]]; then
       find_replication_lag_slave_bytes ${Vip} ${Dbname};
       find_replication_lag_slave_last_trx ${Vip} ${Dbname};
       find_conflicts ${Vip} ${Dbname};
    else
       find_replication_lag_master ${Vip} ${Dbname}
    fi
}

function find_connections {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "show max_connections")
        echo "****************************************************max_connections: ${result}"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -U gds_admin -c "select count(*),usename from pg_stat_activity where usename is not null and pid != pg_backend_pid() and datname='$Dbname' group by 2")
        echo "****************************************************number of connected sessions per user:"
        echo "${result}"
}


function find_current_Qs_top_running {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select count(*),query from pg_stat_activity where query is not NULL and query !='' and
state='active' and pid
!= pg_backend_pid() and datname='$Dbname' group by 2 order by 1 desc limit 5")
    echo "****************************************************top 5 Queries(count):"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}


function find_current_Qs_slow_running {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select query,now() - query_start from pg_stat_activity where state='active' and query_start <= now() - interval '1 second' and pid !=
pg_backend_pid() and datname='$Dbname' order by 2 desc limit 5")
    echo "****************************************************top 5 slow Queries:"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_wraparound {
    Vip="$1"
    Dbname="$2"
    result=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "SELECT relname, age(relfrozenxid) as xid_age, pg_size_pretty(pg_table_size(oid)) as table_size FROM pg_class WHERE relkind = 'r' and pg_table_size(oid) > 10 and age(relfrozenxid) > 200000000 ORDER BY age(relfrozenxid) desc")
    echo "****************************************************tables that need to be vaccuumed (to avoid trx wraparound):"
    echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}

function find_log_errors {
    Vip="$1"
    Dbname="$2"
    log_collector=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "show logging_collector")
    data_dir=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "show data_directory")
    Instance=$(echo ${data_dir} | sed 's/.*-//' | sed 's/.data*//')
    if [[ $log_collector == off ]]; then
          result=$(grep -E 'ERROR|FATAL' /var/service/postgresql-*$Instance/log/main/current | tail -n 20)
          echo "**************************************************** last 20 ERRORS in postgresql's log:(note that logging is not enabled, maybe errors are few because logs rotate too often. check under /var/service/postgresql-*$Instance/log/main/ for more)"
          echo "${result}"
    else
          log_file=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "select filename from (SELECT pg_ls_dir AS filename,(pg_stat_file('pg_log/' || pg_ls_dir)).modification FROM pg_ls_dir('pg_log') WHERE (pg_stat_file('pg_log/' || pg_ls_dir)).isdir = false ORDER BY modification DESC LIMIT 1) as foo;")
          data_dir=$(psql -p 5432 -h $Vip -d $Dbname -t -x -U gds_admin -c "show data_directory")
          result=$(grep -E 'ERROR|FATAL' $data_dir/pg_log/$log_file | tail -n 20)
          echo "**************************************************** last 20 ERRORS in postgresql's log:"
          echo "${result}"
    fi
    result=$(grep 'Error' /var/service/pgbouncer-*$Instance-transaction_mode/log/main/current  | tail -n 10)
          echo "**************************************************** last 10 ERRORS in pgbouncer's log(trx):"
          echo "${result}"
    result=$(grep 'Error' /var/service/pgbouncer-*$Instance-session_mode/log/main/current  | tail -n 10)
          echo "**************************************************** last 10 ERRORS in pgbouncer's log(session):"
          echo "${result}"
    echo "--------------------------------------------------------------------------------------------------------------------------------"
}


if [ $# -lt 1 ]; then
    echo 'no argument given'
    exit 1
elif [ $# -gt 2 ]; then
    echo 'too many arguments'
    exit 1
fi



    vip="$1"
    dbname="$2"

    if [ -z "${dbname}" ]; then find_database ${vip}; else echo "dbname is set to '$dbname'"; fi
    if [ -z "${dbname}" ]; then read -p "Enter database name: " dbname; fi

    find_oldest_running ${vip} ${dbname}
    find_oldest_idle_in_transaction ${vip} ${dbname}
    find_non_default_settings ${vip} ${dbname}
    find_locks_not_granted ${vip} ${dbname}
    find_replication_lag ${vip} ${dbname}
    find_connections ${vip} ${dbname}
    find_current_Qs_top_running ${vip} ${dbname}
    find_current_Qs_slow_running ${vip} ${dbname}
    find_wraparound ${vip} ${dbname}