#!/usr/local/bin/ruby
# ============================================================================

require 'etc'
require 'rubygems'
require 'monitoring_script_multithreshold'
require 'yaml'
require 'mysql'

class CheckMySQLSlaveLag < MonitoringScriptMultithreshold
  SERVICE_NAME = 'mysql_slave_lag'
  SERVICE_DESC = 'Check slave lag of a MySQL server'
  
  OPTIONS = {
    :database  => { :text => "MySQL database", :short => "D", :type => :string,  :required => false },
    :host      => { :text => "MySQL hostname", :short => "H", :type => :string,  :required => false, :default => '127.0.0.1' },
    :user      => { :text => "MySQL user",     :short => "U", :type => :string,  :required => false, :default => 'monitor' },
    :password  => { :text => "MySQL password", :short => "W", :type => :string,  :required => false, :default => "" },
    :port      => { :text => "MySQL port",     :short => "P", :type => :string,  :required => false, :default => "3306" },
    :ssl       => { :text => "Use SSL",        :short => "S", :type => :boolean, :required => false, :default => false },
    :verbose   => { :text => "Verbose",        :short => "V", :type => :bool },
  }

  def get_slave_status
    result = @conn.query("SHOW SLAVE STATUS")
    row = result.fetch_hash()
    return row
  end

  def is_slave_configured?(slave_status)
    # slave is not yet configured
    if slave_status.nil?
      return false
    else
      return true
    end
  end


  def check_repl_running?(slave_status)
    reconnecting = slave_status['Slave_IO_State'] =~ /^Reconnect/
    if slave_status['Slave_IO_Running'] != "Yes" || slave_status['Slave_SQL_Running'] != 'Yes' || !reconnecting.nil?
      return false
    else
      return true
    end
  end

  def check_lag_legacy(slave_status)
    if is_slave_configured? slave_status
      return slave_status['Seconds_Behind_Master']
    else
      return 0
    end
  end

  def check_lag_heartbeat
    begin
      pt_heartbeat_result = @conn.query("SELECT round(min(unix_timestamp(now()) - 
        unix_timestamp(concat(substr(ts,1,10), ' ', substr(ts,12,8))))) as lag_sec 
        FROM percona.heartbeat")
      pth_row = pt_heartbeat_result.fetch_hash
      if pth_row.nil?
        return nil
      else
        read_only_res = @conn.query("SELECT @@read_only as ro")
        read_only_row = read_only_res.fetch_hash
        if read_only_row['ro'] == "1"
          return pth_row['lag_sec']
        else
          # the master doesn't lag
          return 0
        end
      end
    rescue Mysql::Error
      # In this case even the table doesn't exist, we fall back to seconds behind master
      return nil
    end  
  end

  def lag_check(slave_status)
    heartbeat_lag = check_lag_heartbeat
    if heartbeat_lag.nil?
      return check_lag_legacy(slave_status)
    else
      return heartbeat_lag
    end
  end

  def service_check
    begin
      @conn = Mysql.new(options[:host], options[:user], options[:password], options[:database], options[:port].to_i)
    rescue Mysql::Error
      set_message("Unable to connect to MySQL")
      set_status(STATUS_CRITICAL)
    end
    
    # Get SHOW SLAVE STATUS
    slave_status = get_slave_status
    
    # Get slave lag. Even if not a slave, we should still have heartbeat.
    slave_lag = lag_check(slave_status)
    set_metric('slave_lag', slave_lag)
    
    # First check if slave is configured.
    if is_slave_configured?(slave_status)

      # Now that we verified the slave is configured, check that repl is running
      if !check_repl_running?(slave_status)
        replication_status = "not_running"
      else
	replication_status = "valid_slave"
      end

    else
      # Not configured as slave, so it can't lag
      replication_status = "valid_master"
    end
    
    case replication_status
    when "not_running"      
      set_status(STATUS_CRITICAL)
      set_message("Replication is not running")
    when "valid_slave"
      # Super class handles this logic
      if options[:thresholds]
        evaluate_thresholds
      else
        set_status(STATUS_OK)
      end
    when "valid_master"
      set_message("Replication not configured")
      set_status(STATUS_OK)
    end


  end
end
CheckMySQLSlaveLag.new.run!
