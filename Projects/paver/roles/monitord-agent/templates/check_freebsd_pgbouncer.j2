#!/usr/local/bin/ruby
require 'rubygems'
require 'monitoring_script_multithreshold_rate'

class CheckPgbouncerStats < MonitoringScriptMultithresholdRate
  SERVICE_NAME = "pgbouncer"
  SERVICE_DESC = "Report pgbouncer stats"
  OPTIONS = {
    :db  => { :text => "Specific db to check", :short => "i", :type => :string, :default => nil },
    :test => { :text => "Set to use test values", :short => "T", :type => :bool, :default => false },
  }

  def initialize
    super
    CheckPgbouncerStats.const_set('RATE_METRICS', [])
  end

  def service_check
    if options[:test]
      output_arr = DATA.readlines
    else
      output_arr = IO.popen(['/usr/local/bin/psql','-p','5432','-q','-t','-A','-U','gdsmon','-d','pgbouncer','-h','localhost','-c','SHOW STATS;']).readlines
    end

    vars = [ "requests", "received", "sent", "query_time", "avg_req", "avg_recv", "avg_sent", "avg_query"]
    values = {}

   output_arr.each do |line|
      # Line format:
      #             database             | total_requests | total_received |  total_sent  | total_query_time | avg_req | avg_recv | avg_sent | avg_query
      line_arr = line.split('|')

      if options[:db] and line_arr[0] != options[:db]
        next # Skip unspecified interfaces
      end

      vars.each{|x| RATE_METRICS.push "#{line_arr[0]}_#{x}" }

      output_arr = []
      RATE_METRICS.each {|var_name| values[var_name] = 0}
      values["#{line_arr[0]}_requests"] = line_arr[1].to_i/1000
      values["#{line_arr[0]}_received"] = line_arr[2].to_i/1000
      values["#{line_arr[0]}_sent"] = line_arr[3].to_i/1000
      values["#{line_arr[0]}_query_time"] = line_arr[4].to_i/1000
      values["#{line_arr[0]}_avg_req"] = line_arr[5].to_i
      values["#{line_arr[0]}_avg_recv"] = line_arr[6].to_i
      values["#{line_arr[0]}_avg_sent"] = line_arr[7].to_i
      values["#{line_arr[0]}_avg_query"] = line_arr[8].to_i
    end



    	RATE_METRICS.each { |var_name|  set_metric(var_name, values[var_name])}

    if options[:thresholds]
      evaluate_thresholds # also calculates per-second rates
    else
      calc_rates # evaluate_thresholds above calls calc_rates internally
      set_status(STATUS_OK)
    end
    # Only the computed per-second numbers are interesting, so remove the raw
    # numbers from metric output.
    @metrics.reject!{|m,v|RATE_METRICS.include? m}
  end
end
CheckPgbouncerStats.new.run!

__END__
 getaways_jetblue                 |             44 |           4930 |        53540 |            41934 |       0 |        0 |        0 |         0
 goods_inbound_pickup_schedule    |        1517299 |     1582475813 |   2341135295 |      11881784036 |       3 |     3591 |     4797 |      1650
 mobile_notification_push_token   |       51036772 |    11217151208 |  16044013845 |     309136769704 |      84 |    18512 |    26536 |      5167
 pgbouncer                        |              7 |              0 |            0 |                0 |       0 |        0 |        0 |         0
 postgres                         |              0 |              0 |            0 |                0 |       0 |        0 |        0 |         0
 reading_rainbow                  |         423331 |    79558953684 |  35775259348 |      37007699126 |       0 |      100 |       49 |      4182
 relevance_darwin                 |         598427 |   505195069116 | 503139172425 |      31574039577 |       1 |      506 |      298 |       334
 voucher_notifications_snooze     |        2027914 |      320544496 |    419959660 |      21119626219 |       0 |       74 |      225 |       167
 voucher_notifications_task_queue |        9791781 |     3066336120 |   1651971939 |       4674658259 |       0 |        0 |        0 |         0
