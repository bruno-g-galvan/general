# https://calomel.org/nginx.html

worker_processes  {{ ansible_processor_count }};
worker_priority   15;       # renice workers to reduce priority compared to system processes for
                            # machine health. worst case nginx will get ~25% system resources at nice=15
#worker_rlimit_nofile 1024; # maximum number of open files, freebsd = "sysctl kern.maxfiles"
#worker_cpu_affinity 0100;  # pin the single worker_processes to a real, single physical cpu core to avoid cpu cache misses.
                            # we randomly choose cpu2(0100) from our four(4) real cpu cores,
                            # cpu0(0001), cpu1(0010), cpu2(0100) or cpu3(1000)

daemon off;                 # Disable daemonizing when running under runit(1)

events {
    accept_mutex       on;   # serialize accept() per port between multiple workers so only one worker ready at any one moment for efficiency
                             # turn off for httpready or dataready and a single worker
    accept_mutex_delay  50ms; # worker process will accept mutex after this delay if not assigned. (default 500ms)
    #multi_accept       on;   # accept all new connections, ignored when using kqueue method
    use kqueue;              # event method, kqueue for FreeBSD and OpenBSD
    worker_connections  100000;
}


http {
    #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA;
    #ssl_certificate /ssl_keys/example.com_ssl.crt;
    #ssl_certificate_key /ssl_keys/example.com_ssl.key;
    #ssl_ecdh_curve secp384r1;              # 384 bit prime modulus curve efficiently supports ECDHE ssl_ciphers up to a SHA384 hash
    #ssl_prefer_server_ciphers on;          # the preferred ciphers are listed on the server by "ssl_ciphers"
    #ssl_protocols TLSv1.2 TLSv1.1 TLSv1;   # protocols, the order is unimportant
    #ssl_session_cache shared:SSL:10m;
    #ssl_session_timeout 128s;              # how long before the client and server must renegotiate the ssl key
    #ssl_stapling on;                       # staple the ssl cert to the initial reply returned to the client for speed
    ##ssl_stapling_verify on;

    # Temp paths
    fastcgi_temp_path         {{ nginx_temp_path }};
    client_body_temp_path     {{ nginx_temp_path }};
    proxy_temp_path           {{ nginx_temp_path }};
    uwsgi_temp_path           {{ nginx_temp_path }};
    scgi_temp_path            {{ nginx_temp_path }};

    ## Size Limits
    client_body_buffer_size   8k;
    client_header_buffer_size 1k;
    client_max_body_size      1m;

    # Timeouts, do not keep connections open longer then necessary to reduce
    # resource usage and deny Slowloris type attacks.
    client_body_timeout       5s; # maximum time between packets the client can pause when sending nginx any data
    client_header_timeout     5s; # maximum time the client has to send the entire header to nginx
    keepalive_timeout        75s; # timeout which a single keep-alive client connection will stay open
    send_timeout             15s; # maximum time between packets nginx is allowed to pause when sending the client data

    ## General Options
    aio                       on;  # asynchronous file I/O, fast with ZFS, make sure sendfile=off
    charset                   utf-8; # adds the line "Content-Type" into response-header, same as "source_charset"
    default_type              application/octet-stream;
    #directio                 off; # zfs does not support direct i/o because of the ARC and L2ARC
    disable_symlinks          off; # disable symlinks to avoid malicious symlinks out of the document root
    etag                      off; # disables "ETag" response header so clients use Cache-Control header only
    gzip                      off; # disable on the fly gzip compression due to higher latency, only use gzip_static
    gzip_http_version         1.0; # serve gzipped content to all clients including HTTP/1.0
    gzip_static                on; # precompress content (gzip -1) with an external script
    #gzip_vary                 on;  # send response header "Vary: Accept-Encoding"
    gzip_proxied             any; # allows compressed responses for any request even from proxies
    ignore_invalid_headers    on;

    keepalive_requests        50; # number of requests per connection, does not affect SPDY
    keepalive_disable         none; # allow all browsers to use keepalive connections
    lingering_time              2; # maximum time during which nginx will process additional data from the client
    lingering_timeout           2; # maximum waiting time for more client data to arrive
    max_ranges                1; # allow a single range header for resumed downloads and to stop large range header DoS attacks
    merge_slashes              on; # compression of two or more adjacent slashes in a URI into a single slash "//" into "/"
    msie_padding              off;
    #open_file_cache          max=128 inactive=4h; # cache is not be needed if ZFS ARC size is sufficient
    #open_file_cache_errors     on;                # since ARC delivery is faster then the cache lookups
    #open_file_cache_min_uses    1;
    #open_file_cache_valid      3h;
    output_buffers         1 256K; # sendfile=off so set to the total size of all objects on an average page
    #postpone_output          1460; # before sending data response, collect at least one packet's payload (MSS) of data
    read_ahead                512K; # kernel read head set to the output_buffers
    #read_ahead                  0; # no forced read ahead, let ZFS handle I/O calls as zfs is efficient
    recursive_error_pages     on;
    reset_timedout_connection on;  # reset timed out connections freeing ram
    sendfile                  off; # disable on ZFS

    server_tokens             off; # version number in error pages
    server_name_in_redirect   off; # if off, nginx will use the requested Host header
    source_charset            utf-8; # same value as "charset"
    tcp_nodelay               on; # Nagle buffering algorithm, used for keepalive only
    tcp_nopush                off;

    ## Log Format
    log_format  main  '$remote_addr $host $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $ssl_cipher $request_time';

    # MIME types, don't leave home without them.
    include /usr/local/etc/nginx/mime.types;

    # Dynamically include servers
    include {{ nginx_vhost_confdir }}/*.conf;
}
