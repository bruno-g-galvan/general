#!/usr/local/bin/bash
#
#        _/_/_/    _/_/      _/_/_/
#     _/        _/    _/  _/
#      _/_/    _/    _/  _/
#         _/  _/    _/  _/
#  _/_/_/      _/_/      _/_/_/
#
# Check DB hitratio indexes
# MON-641, sblaurock, 2014-04-02

# help
print_usage (){
        echo ""
        echo "$0 -w --> warning count"
        echo "$0 -c --> critical count"
        echo "$0 -h --> this help"
	echo "$0 -p --> Port to check"
        echo ""
        exit 3
}
# commandline options given?
if [ $# -lt 6 ]; then
        echo "- Not all arguments found!"
        print_usage
        exit 3
fi
# fetch commandline options
while test -n "$1"; do
        case "$1" in
        -w)
                warning=$2
                shift
        ;;
        -c)
                critical=$2
                shift
        ;;
	-p)
		Port=$2
		shift
	;;
        -h)
                print_usage
                shift
        esac
        shift
done
# run psql query
result=$(psql -p $Port -AtF ";" -U postgres -c "select (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as index_hit_ratiofrom pg_statio_user_indexes;")
# prevent calc without query output
if [ ! "$result" ]; then
        echo "- Got no Output from psql client"
        exit 3
fi
# status logic
if [ "`echo "$result > $critical" | bc -l`" = "1" ]; then
	echo "result=${result}; CRIT - aaaa is ${result}"
	exit 2
elif [ "`echo "$result > $warning" | bc -l`" = "1" ]; then
        echo "result=${result}; WARN - aaaa is ${result}"
        exit 1
elif [ "`echo "$result < $critical" | bc -l`" = "1" ] && [ "`echo "$result < $warning" | bc -l`" = "1" ]; then
	echo "result=${result}; OK - aaaa is ${result}"
	exit 0
else
	echo "- Unexpected Output from check"
	exit 3
fi
