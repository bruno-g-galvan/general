#!/usr/bin/env bash

function lookup_port {
    conf="$1"
    cat "${conf}" | grep 'port =' | awk '{ print $3}'
}

function find_lag {

    files=$(ls /var/groupon/postgresql/data{{postgresql_port_major}}/*/data/postgresql.conf 2>/dev/null)
    for f in ${files}; do
    instance=$(dirname ${f} | sed 's/.*-//' | sed 's/.data*//')
    port=$(lookup_port ${f})
    echo "------------------------------------------------------------------------------------------------------------------"
    echo "${instance}   ${port}"
    recovery=$(psql -p ${port} -At -U postgres -c "select pg_is_in_recovery()")
    if [[ $recovery != t ]]; then
    has_slave=$(psql -p ${port} -At -U postgres -c "select count(*) from pg_stat_replication")
    	if (( $has_slave > 0 )); then
	    echo "LAG as master in Mbytes:"
    	    result=$(psql -t -p ${port} -U postgres -c "select client_addr as slave_ip,pg_xlog_location_diff(pg_current_xlog_location(),replay_location)/1048576 as Mbytes_lag
            from pg_catalog.pg_stat_replication where application_name = 'walreceiver'")
	    echo "${result}"
    	else
            echo "LAG as master: is a master without slaves"
    	fi
    else 
#    if [[ $recovery == t ]]; then
	echo "LAG as slave:"
	result=$(psql -t -p ${port} -U postgres -c "select pg_xlog_location_diff(pg_last_xlog_receive_location(),pg_last_xlog_replay_location())/1048576 as slave_lag_Mbytes")
    	echo "Mbytes: ${result}"
	result=$(psql -At -p ${port} -U postgres -c "select extract (epoch from now() - pg_last_xact_replay_timestamp())::integer as seconds_since_last_applied_trx")
        echo "last applied transaction was: ${result} seconds ago"
        has_slave2=$(psql -p ${port} -At -U postgres -c "select count(*) from pg_stat_replication")
        if (( $has_slave2 > 0 )); then
        	result=$(psql -t -p ${port} -U postgres -c "select client_addr as slave_ip,pg_xlog_location_diff(sent_location,replay_location)/1048576 as
        	Mbytes_lag from pg_catalog.pg_stat_replication where application_name = 'walreceiver'")
        	echo "replication lag slave to slave: ${result}"
        else
                echo "replication lag slave to slave: has no slave"
        fi
    fi
    echo "------------------------------------------------------------------------------------------------------------------"
    done
}

find_lag
