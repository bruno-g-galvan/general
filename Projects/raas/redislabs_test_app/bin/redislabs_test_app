#!/usr/bin/env ruby

require 'redis'
require 'logger'
require 'securerandom'
require 'yaml'

MAX_ELEMS = 100
TTL = 60
READ_WRITE_RATIO = 100
MAX_LOG_SIZE = 100_000
OLD_LOG_FILES = 1

logger = Logger.new('/var/groupon/log/redislabs_test_app.log', OLD_LOG_FILES, MAX_LOG_SIZE)
begin

  host = YAML.load_file('/usr/local/etc/host.yml')
  raise "no redislabs_test_app params found in host file" unless host['params']['redislabs_test_app']
  redishost = host['params']['redislabs_test_app']['redishost'] # ex: redis-17014.us.raas-test1.grpn
  redisport = host['params']['redislabs_test_app']['redisport'] # ex: 17014

  redis = Redis.new(host: redishost, port: redisport)
  fake_cookies = []
  pointer = 0
  loop do
    begin
      if fake_cookies.size < MAX_ELEMS or (rand(READ_WRITE_RATIO) == 0)
        fake_cookie = SecureRandom.hex
        if rand(2) == 0 # simulate a read miss
          res = redis.get(fake_cookie)
          logger.info "get=#{fake_cookie} res=#{res}"
        end
        redis.set(fake_cookie, '1')
        redis.expire(fake_cookie, TTL)
        fake_cookies << fake_cookie
        logger.info "set=#{fake_cookie} fake_cookies=#{fake_cookies.size} ttl=#{TTL}"
        if fake_cookies.size > MAX_ELEMS
          logger.info "delete=#{fake_cookies.first}"
          fake_cookies.delete_at(0)
        end
      else
        pointer = (pointer + 1) % fake_cookies.size
        fake_cookie = fake_cookies[pointer]
        res = redis.get(fake_cookie)
        if res == '1'
          logger.info "valid=#{fake_cookie}"
        else
          logger.info "expired=#{fake_cookie}"
          fake_cookies.delete(fake_cookie)
        end
      end
    rescue
      logger.error "error #{$!.class} #{$!.to_s}"
      begin
        logger.info "reconnecting..."
        redis = Redis.new(host: redishost, port: redisport)
        logger.info "reconnected..."
      rescue
        logger.error "failed connecting, sleep 0.5"
        sleep 0.5
        retry
      end
    end
    sleep 0.01 # ~ 100 ops/s
  end
rescue
  logger.error $!
end
