[[inputs.postgresql_extensible]]
  log_file_path = "/var/groupon/logs/telegraf_postgresql_extensible.log"
  address = "ADDRESS"
  outputaddress = "SERVER"
  prepared_statements = true
  [[inputs.postgresql_extensible.query]]
    sqlquery = "SELECT setting::int AS max_connections FROM pg_settings WHERE name='max_connections'"
    version = 801
    withdbname = false
    tagvalue = ""
  [[inputs.postgresql_extensible.query]]
    sqlquery = "SELECT count(*) AS app_process_count FROM pg_stat_activity WHERE usename SIMILAR TO '%(app)'"
    version = 801
    withdbname = false
    tagvalue = ""
  [[inputs.postgresql_extensible.query]]
    sqlquery = "SELECT usename, datname, count(*) AS connections FROM pg_stat_activity WHERE datname NOT IN ('postgres', 'template0', 'template1', 'rdsadmin') AND state!='idle' AND usename NOT IN ('gds_admin','rdsrepladmin','checkmk_mon') AND datname IS NOT NULL GROUP BY 1,2"
    version = 801
    withdbname = false
    tagvalue = "usename,datname"
  [[inputs.postgresql_extensible.query]]
    sqlquery = """\
      SELECT t.res as replication_lag_primary_bytes
        FROM (
          SELECT CASE
            WHEN ((SELECT count(*) FROM pg_stat_replication) > 0)
            THEN (SELECT pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn)::bigint
                    FROM pg_catalog.pg_stat_replication
                    WHERE application_name = 'walreceiver'
                    ORDER BY 1 DESC LIMIT 1)
            ELSE -1
            END AS res
        ) as t WHERE t.res > -1
    """
    version = 801
    withdbname = false
    tagvalue = ""
  [[inputs.postgresql_extensible.query]]
    sqlquery = """\
      SELECT t.res as replication_lag_slave_seconds
        FROM (
          SELECT CASE
            WHEN pg_last_wal_receive_lsn() - pg_last_wal_replay_lsn() < 10
            THEN 0
            ELSE extract (epoch FROM now() - pg_last_xact_replay_timestamp())::integer
            END AS res
        ) as t WHERE t.res IS NOT NULL
    """
    version = 801
    withdbname = false
    tagvalue = ""
  [[inputs.postgresql_extensible.query]]
    sqlquery = """\
      SELECT (SELECT count(*) FROM pg_stat_activity WHERE wait_event_type='Lock') AS waiting_queries,
             (SELECT count(*) FROM pg_locks WHERE granted='f') AS locks_not_granted,
             (SELECT count(*) FROM pg_locks) AS locks_count
    """
    version = 801
    withdbname = false
    tagvalue = ""
  [[inputs.postgresql_extensible.query]]
    sqlquery = "SELECT datname, max(age(datfrozenxid)) as max_age_datfrozenxid FROM pg_database GROUP BY datname"
    version = 801
    withdbname = false
    tagvalue = ""
  [[inputs.postgresql_extensible.query]]
    sqlquery = """\
      SELECT * FROM (
        SELECT datname,
          abs(round(extract(epoch from (now() - min(xact_start))))) AS trx_active_seconds,
          count(*) AS trx_active_count
        FROM pg_stat_activity
        WHERE state='active' AND query not ilike '%vacuum%'
        GROUP BY datname
      ) AS t WHERE t.datname IS NOT NULL
    """
    version = 801
    withdbname = false
    tagvalue = "datname"
  [[inputs.postgresql_extensible.query]]
    sqlquery = """\

      SELECT * FROM (
        SELECT datname,
          abs(round(extract(epoch from (now() - min(xact_start))))) AS trx_idle_seconds,
          count(*) AS trx_idle_count
        FROM pg_stat_activity
        WHERE state='idle in transaction'
        GROUP BY datname
      ) AS t WHERE t.datname IS NOT NULL
    """
    version = 801
    withdbname = false
    tagvalue = "datname"
  [[inputs.postgresql_extensible.query]]
    sqlquery = """\
      SELECT max(rolconnlimit) AS max_rolconnlimit
      FROM pg_roles
      WHERE rolname SIMILAR TO '%(app|jdbc|django|clojure)'
      AND rolconnlimit > 0
    """
    version = 801
    withdbname = false
    tagvalue = "datname"
